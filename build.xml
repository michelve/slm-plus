<?xml version="1.0" encoding="UTF-8"?>
<project name="Software Licence Manager" basedir=".">

    <!-- Include config file containing  -->
    <loadproperties srcFile="build.properties" />
    <!-- Sets variables which can later be used. -->
    <!-- The value of a property is accessed via ${} -->
    <property name="src.dir" location="src" />
    <property name="build.dir" location="target/generated" />
    <property name="dist.dir" location="target/dist" />
    <property name="php.src" location="${src.dir}/main/php"/>
    <property name="test.php.src" location="${src.dir}/test/php"/>
    <property name="resources.src" location="${src.dir}/main/resources"/>
    <property name="version.current" value=""/>
    <tstamp>
        <format property="TODAY" pattern="yyyy-MM-dd hh:mm"/>
    </tstamp>
    <fail unless="plugin.name"/>
    <target name="build.clean">
        <echo message="delete the build and dist directories ..." level="info"/>
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>
   <!-- Creates the  build & moves the files directory-->
    <target name="makedir" depends="build.clean">
        <echo message="making build and dist directories ..." level="info"/>
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.dir}/${plugin.slug}" />
        <mkdir dir="${dist.dir}" />
    </target>

    <target name="make" depends="makedir,changelog.generate" description="makes the magic">
        <copy todir="${build.dir}/${plugin.slug}" failonerror="false" verbose="true">
            <fileset dir="${php.src}"
                     includes="**/*.php,**/*.png,**/*.svg,**/*.css,**/*.js,**/*.mo,**/*.pot"
                     excludes="software-license-manager.php"
            />
        </copy>
    </target>

    <filterset id="slm_replacement">
        <filter token="build.date" value="${TODAY}"/>
        <filter token="changelog" value="${git.changelog}"/>
        <propertyset>
            <propertyref prefix="plugin"/>
        </propertyset>
    </filterset>

    <target name="text_replacement" depends="make">
        <echo message="Generating readme file ..." level="info" description="makes readme txt"/>
        <copy todir="${build.dir}/${plugin.slug}" failonerror="true">
            <fileset dir="${resources.src}"/>
            <globmapper from="readme_template.txt" to="readme.txt"/>
            <filterset refid="slm_replacement"/>
        </copy>
        <copy todir="${build.dir}" failonerror="true">
            <fileset dir="${resources.src}" includes="info.json"/>
            <filterset refid="slm_replacement"/>
        </copy>
        <copy todir="${build.dir}/${plugin.slug}" failonerror="true" verbose="true">
            <fileset dir="${php.src}">
                <include name="**/software-license-manager.php"/>
            </fileset>
            <globmapper from="software-license-manager.php" to="${plugin.slug}.php"/>
            <filterset refid="slm_replacement"/>
        </copy>
    </target>
    <target name="php_delete" depends="make">
        <echo message="Deleting main php file ..." level="info" description="Deleting php"/>
        <delete file="${build.dir}/${plugin.slug}/${plugin.slug}.php" failonerror="true"/>
    </target>
    <target name="php_text_replace" depends="php_delete">
        <echo message="Generating main php file ..." level="info" description="makes php"/>
    </target>
    <target name="zip" depends="makedir, make, text_replacement, php_text_replace">
        <echo message="making the zip ..." level="info"/>
        <zip destfile="${dist.dir}/${plugin.slug}.zip"
             basedir="/${build.dir}"
        />
    </target>

    <target name="default" depends="zip">
        <echo message="Build Version ${plugin.version} Complete find the zip in ${dist.dir}/${plugin.slug}.zip" level="info"/>
    </target>
    <target name="release.init" >
        <input message="Please enter previous release:" addproperty="version.prior" defaultvalue="${version.prior}"/>
        <property name="version.current" value="${plugin.version}"/>
        <echo message="Current version is: ${version.current}"/>
        <input message="Please enter next version:" addproperty="version.next"/>
    </target>
    <target name="release.tag" depends="release.init">
        <echo message="Creating Branch and Tagging for release"/>
        <exec executable="git" failonerror="true" logerror="true">
            <arg line="branch ${plugin.version}"/>
        </exec>
        <exec executable="git" failonerror="true" logerror="true">
            <arg line="tag ${plugin.version}"/>
        </exec>
    </target>
    <target name="changelog.generate">
        <property name="git_arg" value='log --pretty=format:"* %s (%an)" ${version.prior}..${version.current}'/>
        <exec executable="git" failonerror="true" outputproperty="git.changelog" logerror="true" resolveexecutable="true">
            <arg line='${git_arg}'/>
        </exec>
        <echo message="${git.changelog}"/>
        <delete file="${build.dir}\${plugin.slug}\CHANGELOG" failonerror="true"/>
        <concat destfile="${build.dir}\${plugin.slug}\CHANGELOG"  fixlastline="true">
            <header trimleading="yes">${TODAY} - v${version.prior} .. v${version.current}
                ${git.changelog}
            </header>
            <fileset dir="." includes="CHANGELOG" />
        </concat>
    </target>
    <target name="changelog.update" depends="release.tag,changelog.generate">
        <delete file="CHANGELOG"/>
        <move file="${build.dir}\${plugin.slug}\CHANGELOG" tofile="CHANGELOG"/>
    </target>
    <target name="release" depends="changelog.update,default"></target>
    <!-- *************************************************************** -->
    <!--             ******** WP-CLI **********                       -->
    <!-- *************************************************************** -->
<!--
    <target name="wp.status" description="WP-CLI check plugin state">
        <echo message="Checking ${plugin.name} Status..." />

        <exec executable="wp" dir=".">
            <arg line="plugin status ${plugin.name}" />
        </exec>
    </target>

    <target name="wp.install" description="WP-CLI install plugin">
        <echo message="Installing ${plugin.name}..." />

        <exec executable="wp" dir=".">
            <arg line="plugin install ${dist.dir}/${plugin.name}.zip" />
        </exec>
    </target>

    <target name="wp.activate" depends="wp.install" description="WP-CLI activate plugin">
        <echo message="Activating ${plugin.name}..." />

        <exec executable="wp" dir=".">
            <arg line="plugin activate ${plugin.name}" />
        </exec>
    </target>

    <target name="wp.deactivate" description="WP-CLI deactivate plugin">
        <echo message="Deactivating ${plugin.name}..." />

        <exec executable="wp" dir=".">
            <arg line="plugin deactivate ${plugin.name}.zip" />
        </exec>
    </target>

    <target name="wp.delete" description="WP-CLI deactivate plugin">
        <echo message="Deleting ${plugin.name}..." />

        <exec executable="wp" dir=".">
            <arg line="plugin delete ${plugin.name}.zip" />
        </exec>
    </target>
    -->
</project>

